// Code generated by protoc-gen-go.
// source: mokoshsvc.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	mokoshsvc.proto

It has these top-level messages:
	CapabilitiesRequest
	CapabilitiesReply
	MergePart
	MergeResult
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Capability int32

const (
	Capability_MERGE Capability = 0
)

var Capability_name = map[int32]string{
	0: "MERGE",
}
var Capability_value = map[string]int32{
	"MERGE": 0,
}

func (x Capability) String() string {
	return proto.EnumName(Capability_name, int32(x))
}
func (Capability) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The request message
type CapabilitiesRequest struct {
}

func (m *CapabilitiesRequest) Reset()                    { *m = CapabilitiesRequest{} }
func (m *CapabilitiesRequest) String() string            { return proto.CompactTextString(m) }
func (*CapabilitiesRequest) ProtoMessage()               {}
func (*CapabilitiesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The response message containing capabilites of this server
type CapabilitiesReply struct {
	Capabilities []Capability `protobuf:"varint,1,rep,packed,name=capabilities,enum=pb.Capability" json:"capabilities,omitempty"`
}

func (m *CapabilitiesReply) Reset()                    { *m = CapabilitiesReply{} }
func (m *CapabilitiesReply) String() string            { return proto.CompactTextString(m) }
func (*CapabilitiesReply) ProtoMessage()               {}
func (*CapabilitiesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CapabilitiesReply) GetCapabilities() []Capability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

type MergePart struct {
	Data          []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	AddEmptyIfOdd bool   `protobuf:"varint,2,opt,name=addEmptyIfOdd" json:"addEmptyIfOdd,omitempty"`
}

func (m *MergePart) Reset()                    { *m = MergePart{} }
func (m *MergePart) String() string            { return proto.CompactTextString(m) }
func (*MergePart) ProtoMessage()               {}
func (*MergePart) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MergePart) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MergePart) GetAddEmptyIfOdd() bool {
	if m != nil {
		return m.AddEmptyIfOdd
	}
	return false
}

type MergeResult struct {
	Data  []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Pages int32  `protobuf:"varint,2,opt,name=pages" json:"pages,omitempty"`
}

func (m *MergeResult) Reset()                    { *m = MergeResult{} }
func (m *MergeResult) String() string            { return proto.CompactTextString(m) }
func (*MergeResult) ProtoMessage()               {}
func (*MergeResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MergeResult) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MergeResult) GetPages() int32 {
	if m != nil {
		return m.Pages
	}
	return 0
}

func init() {
	proto.RegisterType((*CapabilitiesRequest)(nil), "pb.CapabilitiesRequest")
	proto.RegisterType((*CapabilitiesReply)(nil), "pb.CapabilitiesReply")
	proto.RegisterType((*MergePart)(nil), "pb.MergePart")
	proto.RegisterType((*MergeResult)(nil), "pb.MergeResult")
	proto.RegisterEnum("pb.Capability", Capability_name, Capability_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Mokosh service

type MokoshClient interface {
	// Request all capabilities supported by this instance
	Capabilities(ctx context.Context, in *CapabilitiesRequest, opts ...grpc.CallOption) (*CapabilitiesReply, error)
	Merge(ctx context.Context, opts ...grpc.CallOption) (Mokosh_MergeClient, error)
}

type mokoshClient struct {
	cc *grpc.ClientConn
}

func NewMokoshClient(cc *grpc.ClientConn) MokoshClient {
	return &mokoshClient{cc}
}

func (c *mokoshClient) Capabilities(ctx context.Context, in *CapabilitiesRequest, opts ...grpc.CallOption) (*CapabilitiesReply, error) {
	out := new(CapabilitiesReply)
	err := grpc.Invoke(ctx, "/pb.Mokosh/Capabilities", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mokoshClient) Merge(ctx context.Context, opts ...grpc.CallOption) (Mokosh_MergeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Mokosh_serviceDesc.Streams[0], c.cc, "/pb.Mokosh/Merge", opts...)
	if err != nil {
		return nil, err
	}
	x := &mokoshMergeClient{stream}
	return x, nil
}

type Mokosh_MergeClient interface {
	Send(*MergePart) error
	CloseAndRecv() (*MergeResult, error)
	grpc.ClientStream
}

type mokoshMergeClient struct {
	grpc.ClientStream
}

func (x *mokoshMergeClient) Send(m *MergePart) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mokoshMergeClient) CloseAndRecv() (*MergeResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MergeResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Mokosh service

type MokoshServer interface {
	// Request all capabilities supported by this instance
	Capabilities(context.Context, *CapabilitiesRequest) (*CapabilitiesReply, error)
	Merge(Mokosh_MergeServer) error
}

func RegisterMokoshServer(s *grpc.Server, srv MokoshServer) {
	s.RegisterService(&_Mokosh_serviceDesc, srv)
}

func _Mokosh_Capabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MokoshServer).Capabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Mokosh/Capabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MokoshServer).Capabilities(ctx, req.(*CapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mokosh_Merge_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MokoshServer).Merge(&mokoshMergeServer{stream})
}

type Mokosh_MergeServer interface {
	SendAndClose(*MergeResult) error
	Recv() (*MergePart, error)
	grpc.ServerStream
}

type mokoshMergeServer struct {
	grpc.ServerStream
}

func (x *mokoshMergeServer) SendAndClose(m *MergeResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mokoshMergeServer) Recv() (*MergePart, error) {
	m := new(MergePart)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Mokosh_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Mokosh",
	HandlerType: (*MokoshServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Capabilities",
			Handler:    _Mokosh_Capabilities_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Merge",
			Handler:       _Mokosh_Merge_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "mokoshsvc.proto",
}

func init() { proto.RegisterFile("mokoshsvc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x50, 0xc1, 0x4a, 0xc3, 0x40,
	0x14, 0xcc, 0x56, 0x53, 0xec, 0x33, 0x6d, 0xf5, 0x69, 0x69, 0xe8, 0x29, 0x2c, 0x1e, 0x82, 0x42,
	0x0e, 0xf1, 0xe0, 0x55, 0x90, 0x50, 0x3c, 0x04, 0x65, 0xff, 0x60, 0xd3, 0x5d, 0x6b, 0x30, 0x25,
	0xcf, 0xec, 0x56, 0xc9, 0xdf, 0x8b, 0x5b, 0x48, 0x13, 0xf4, 0xf6, 0x66, 0xde, 0x30, 0xcc, 0x0c,
	0xcc, 0x77, 0xf5, 0x47, 0x6d, 0xde, 0xcd, 0xd7, 0x26, 0xa1, 0xa6, 0xb6, 0x35, 0x8e, 0xa8, 0xe0,
	0x0b, 0xb8, 0x7a, 0x92, 0x24, 0x8b, 0xb2, 0x2a, 0x6d, 0xa9, 0x8d, 0xd0, 0x9f, 0x7b, 0x6d, 0x2c,
	0x5f, 0xc3, 0xe5, 0x90, 0xa6, 0xaa, 0xc5, 0x14, 0x82, 0x4d, 0x8f, 0x0c, 0x59, 0x74, 0x12, 0xcf,
	0xd2, 0x59, 0x42, 0x45, 0xd2, 0x89, 0x5b, 0x31, 0xd0, 0xf0, 0x0c, 0x26, 0xb9, 0x6e, 0xb6, 0xfa,
	0x55, 0x36, 0x16, 0x11, 0x4e, 0x95, 0xb4, 0x32, 0x64, 0x11, 0x8b, 0x03, 0xe1, 0x6e, 0xbc, 0x81,
	0xa9, 0x54, 0x2a, 0xdb, 0x91, 0x6d, 0x9f, 0xdf, 0x5e, 0x94, 0x0a, 0x47, 0x11, 0x8b, 0xcf, 0xc4,
	0x90, 0xe4, 0x0f, 0x70, 0xee, 0x6c, 0x84, 0x36, 0xfb, 0xea, 0x7f, 0xa3, 0x6b, 0xf0, 0x49, 0x6e,
	0xb5, 0x71, 0x06, 0xbe, 0x38, 0x80, 0xdb, 0x25, 0xc0, 0x31, 0x1b, 0x4e, 0xc0, 0xcf, 0x33, 0xb1,
	0xce, 0x2e, 0xbc, 0xf4, 0x1b, 0xc6, 0xb9, 0xdb, 0x03, 0x1f, 0x21, 0xe8, 0x77, 0xc5, 0xe5, 0xa0,
	0xd0, 0x71, 0x94, 0xd5, 0xe2, 0xef, 0x83, 0xaa, 0x96, 0x7b, 0x78, 0x07, 0xbe, 0x4b, 0x87, 0xd3,
	0x5f, 0x45, 0xd7, 0x77, 0x35, 0xef, 0xe0, 0x21, 0x37, 0xf7, 0x62, 0x56, 0x8c, 0xdd, 0xf8, 0xf7,
	0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x06, 0x4b, 0xc6, 0x95, 0x8f, 0x01, 0x00, 0x00,
}
